# Justin Scott
# 10163739

import matplotlib.pyplot as plt
import math as m
import random as rand

# This code generates the transmitted and received signals.
# x are the values (in radians) at which the transmitted sin function was evaluated
#      (used for the x-coordiantes when plotting)
# y is the list of amplitude values in the transmitted signal
# y_noisy is the received signal corrupted by random noise
#
# DO NOT EDIT THIS CODE!

x = [ d * m.pi / 180 for d in range(360*3)]
y = [m.sin(k) for k in x ]
y_noisy = [m.sin(k) + rand.gauss(0, .1) for k in x]


# Part (a):
# Write your function for moving average filtering here.  See the assignment description
# for details.
def filter_noise(y, r):
    try:
        if r < 0 or r > len(y) / 2:
            raise ValueError('The radius value is not valid!')
        else:
            filtered_y = []
            for num, val in enumerate(y):
                if num < r or num >= len(y) - r:
                    filtered_y.append(0)
                else:
                    avg_val = 0
                    for _ in range(-r,r+1):
                        avg_val += y[num+_]
                    avg_val = avg_val / (r * 2 + 1)
                    filtered_y.append(avg_val)
            return filtered_y
    except ValueError as e:
        print(e)

# part (b):
# write a function call here to filter y_noisy with a filter of radius 9 and obtain the filtered signal.
filtered_y = filter_noise(y_noisy, 9)

# part (c):
# Now write code to plot the noisy signal and the filtered signal in separate figure windows.
# Note that because a new noisy signal is generated by adding random noise each time the function
# is run, the noisy and filtered signals will look slightly different each time you run the program.
# Try to make the figures look as close as possible to the figures in the assignment description.
# The functions from matplotlib.pyplot that may be useful for this are as follows:
#
#    figure(), plot(), show(), xlim(), ylim(), xlabel(), ylabel(), title()
#plt.plot(filtered_y)

# You need to call plt.figure() once for EACH figure you prepare.  Uncomment this line when you are ready

# PLOT THE ORIGINAL, NOISY SIGNAL HERE
plt.figure()
plt.plot(y_noisy)

# PLOT THE SMOOTHED SIGNAL HERE
plt.figure()
plt.plot(filtered_y)

plt.show()