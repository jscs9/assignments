# Justin Scott
# 10163739

import matplotlib.pyplot as plt
import math as m
import random as rand

# This code generates the transmitted and received signals.
# x are the values (in radians) at which the transmitted sin function was evaluated
#      (used for the x-coordiantes when plotting)
# y is the list of amplitude values in the transmitted signal
# y_noisy is the received signal corrupted by random noise
#
# DO NOT EDIT THIS CODE!

x = [ d * m.pi / 180 for d in range(360*3)]
y = [m.sin(k) for k in x ]
y_noisy = [m.sin(k) + rand.gauss(0, .1) for k in x]


# Part (a):
# Write your function for moving average filtering here.  See the assignment description
# for details.
def filter_noise(y, r):
    z = [0] * r
    print(z)

# part (b):
# write a function call here to filter y_noisy with a filter of radius 9 and obtain the filtered signal.
filter_noise(y_noisy, 9)

# part (c):
# Now write code to plot the noisy signal and the filtered signal in separate figure windows.
# Note that because a new noisy signal is generated by adding random noise each time the function
# is run, the noisy and filtered signals will look slightly different each time you run the program.
# Try to make the figures look as close as possible to the figures in the assignment description.
# The functions from matplotlib.pyplot that may be useful for this are as follows:
#
#    figure(), plot(), show(), xlim(), ylim(), xlabel(), ylabel(), title()

# You need to call plt.figure() once for EACH figure you prepare.  Uncomment this line when you are ready
#plt.figure()

# PLOT THE ORIGINAL, NOISY SIGNAL HERE


#plt.figure()

# PLOT THE SMOOTHED SIGNAL HERE

